/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
'use strict';
/*eslint no-console-disallow: "off"*/
/*global React ReactDOM Table StringInterner StackRegistry AggrowData Aggrow preLoadedCapture:true*/

function RefVisitor(refs,id){
this.refs=refs;
this.id=id;
}

RefVisitor.prototype={
moveToEdge:function moveToEdge(name){
var ref=this.refs[this.id];
if(ref&&ref.edges){
var edges=ref.edges;
for(var edgeId in edges){
if(edges[edgeId]===name){
this.id=edgeId;
return this;
}
}
}
this.id=undefined;
return this;
},
moveToFirst:function moveToFirst(callback){
var ref=this.refs[this.id];
if(ref&&ref.edges){
var edges=ref.edges;
for(var edgeId in edges){
this.id=edgeId;
if(callback(edges[edgeId],this)){
return this;
}
}
}
this.id=undefined;
return this;
},
forEachEdge:function forEachEdge(callback){
var ref=this.refs[this.id];
if(ref&&ref.edges){
var edges=ref.edges;
var visitor=new RefVisitor(this.refs,undefined);
for(var edgeId in edges){
visitor.id=edgeId;
callback(edges[edgeId],visitor);
}
}
},
getType:function getType(){
var ref=this.refs[this.id];
if(ref){
return ref.type;
}
return undefined;
},
getRef:function getRef(){
return this.refs[this.id];
},
clone:function clone(){
return new RefVisitor(this.refs,this.id);
},
isDefined:function isDefined(){
return!!this.id;
},
getValue:function getValue(){var _this=this;
var ref=this.refs[this.id];
if(ref){
if(ref.type==='string'){
if(ref.value){
return ref.value;
}else{var _ret=function(){
var rope=[];
_this.forEachEdge(function(name,visitor){
if(name&&name.startsWith('[')&&name.endsWith(']')){
var index=parseInt(name.substring(1,name.length-1),10);
rope[index]=visitor.getValue();
}
});
return{v:rope.join('')};}();if(typeof _ret==="object")return _ret.v;
}
}else if(ref.type==='ScriptExecutable'||
ref.type==='EvalExecutable'||
ref.type==='ProgramExecutable'){
return ref.value.url+':'+ref.value.line+':'+ref.value.col;
}else if(ref.type==='FunctionExecutable'){
return ref.value.name+'@'+ref.value.url+':'+ref.value.line+':'+ref.value.col;
}else if(ref.type==='NativeExecutable'){
return ref.value.function+' '+ref.value.constructor+' '+ref.value.name;
}else if(ref.type==='Function'){
var executable=this.clone().moveToEdge('@Executable');
if(executable.id){
return executable.getRef().type+' '+executable.getValue();
}
}
}
return'#none';
}};


function forEachRef(refs,callback){
var visitor=new RefVisitor(refs,undefined);
for(var id in refs){
visitor.id=id;
callback(visitor);
}
}

function firstRef(refs,callback){
for(var id in refs){
var ref=refs[id];
if(callback(id,ref)){
return new RefVisitor(refs,id);
}
}
return new RefVisitor(refs,undefined);
}

function getInternalInstanceName(visitor){
var type=visitor.clone().moveToEdge('_currentElement').moveToEdge('type');
if(type.getType()==='string'){// element.type is string
return type.getValue();
}else if(type.getType()==='Function'){// element.type is function
var displayName=type.clone().moveToEdge('displayName');
if(displayName.isDefined()){
return displayName.getValue();// element.type.displayName
}
var name=type.clone().moveToEdge('name');
if(name.isDefined()){
return name.getValue();// element.type.name
}
type.moveToEdge('@Executable');
if(type.getType()==='FunctionExecutable'){
return type.getRef().value.name;// element.type symbolicated name
}
}
return'#unknown';
}

function buildReactComponentTree(visitor,registry,strings){
var ref=visitor.getRef();
if(ref.reactTree||ref.reactParent===undefined){
return;// has one or doesn't need one
}
var parentVisitor=ref.reactParent;
if(parentVisitor===null){
ref.reactTree=registry.insert(registry.root,strings.intern(getInternalInstanceName(visitor)));
}else if(parentVisitor){
var parentRef=parentVisitor.getRef();
buildReactComponentTree(parentVisitor,registry,strings);
var relativeName=getInternalInstanceName(visitor);
if(ref.reactKey){
relativeName=ref.reactKey+': '+relativeName;
}
ref.reactTree=registry.insert(parentRef.reactTree,strings.intern(relativeName));
}else{
throw'non react instance parent of react instance';
}
}

function markReactComponentTree(refs,registry,strings){
// annotate all refs that are react internal instances with their parent and name
// ref.reactParent = visitor that points to parent instance,
//   null if we know it's an instance, but don't have a parent yet
// ref.reactKey = if a key is used to distinguish siblings
forEachRef(refs,function(visitor){
var visitorClone=visitor.clone();// visitor will get stomped on next iteration
var ref=visitor.getRef();
visitor.forEachEdge(function(edgeName,edgeVisitor){
var edgeRef=edgeVisitor.getRef();
if(edgeRef){
if(edgeName==='_renderedChildren'){
if(ref.reactParent===undefined){
// ref is react component, even if we don't have a parent yet
ref.reactParent=null;
}
edgeVisitor.forEachEdge(function(childName,childVisitor){
var childRef=childVisitor.getRef();
if(childRef&&childName.startsWith('.')){
childRef.reactParent=visitorClone;
childRef.reactKey=childName;
}
});
}else if(edgeName==='_renderedComponent'){
if(ref.reactParent===undefined){
ref.reactParent=null;
}
edgeRef.reactParent=visitorClone;
}
}
});
});
// build tree of react internal instances (since that's what has the structure)
// fill in ref.reactTree = path registry node
forEachRef(refs,function(visitor){
buildReactComponentTree(visitor,registry,strings);
});
// hook in components by looking at their _reactInternalInstance fields
forEachRef(refs,function(visitor){
var ref=visitor.getRef();
var instanceRef=visitor.moveToEdge('_reactInternalInstance').getRef();
if(instanceRef){
ref.reactTree=instanceRef.reactTree;
}
});
}

function functionUrlFileName(visitor){
var executable=visitor.clone().moveToEdge('@Executable');
var ref=executable.getRef();
if(ref&&ref.value&&ref.value.url){
var url=ref.value.url;
var file=url.substring(url.lastIndexOf('/')+1);
if(file.endsWith('.js')){
file=file.substring(0,file.length-3);
}
return file;
}
return undefined;
}

function markModules(refs){
var modules=firstRef(refs,function(id,ref){return ref.type==='CallbackGlobalObject';});
modules.moveToEdge('require');
modules.moveToFirst(function(name,visitor){return visitor.getType()==='JSActivation';});
modules.moveToEdge('modules');
modules.forEachEdge(function(name,visitor){
var ref=visitor.getRef();
visitor.moveToEdge('exports');
if(visitor.getType()==='Object'){
visitor.moveToFirst(function(memberName,member){return member.getType()==='Function';});
if(visitor.isDefined()){
ref.module=functionUrlFileName(visitor);
}
}else if(visitor.getType()==='Function'){
var displayName=visitor.clone().moveToEdge('displayName');
if(displayName.isDefined()){
ref.module=displayName.getValue();
}
ref.module=functionUrlFileName(visitor);
}
if(ref&&!ref.module){
ref.module='#unknown '+name;
}
});
}

function registerPathToRoot(refs,registry,strings){
markReactComponentTree(refs,registry,strings);
markModules(refs);
var breadth=[];
forEachRef(refs,function(visitor){
var ref=visitor.getRef();
if(ref.type==='CallbackGlobalObject'){
ref.rootPath=registry.insert(registry.root,strings.intern(ref.type));
breadth.push(visitor.clone());
}
});var _loop=function _loop(){

var nextBreadth=[];var _loop2=function _loop2(
i){
var visitor=breadth[i];
var ref=visitor.getRef();
visitor.forEachEdge(function(edgeName,edgeVisitor){
var edgeRef=edgeVisitor.getRef();
if(edgeRef&&edgeRef.rootPath===undefined){
var pathName=edgeRef.type;
if(edgeName){
pathName=edgeName+': '+pathName;
}
edgeRef.rootPath=registry.insert(ref.rootPath,strings.intern(pathName));
nextBreadth.push(edgeVisitor.clone());
// copy module and react tree forward
if(edgeRef.module===undefined){
edgeRef.module=ref.module;
}
if(edgeRef.reactTree===undefined){
edgeRef.reactTree=ref.reactTree;
}
}
});};for(var i=0;i<breadth.length;i++){_loop2(i);
}
breadth=nextBreadth;};while(breadth.length>0){_loop();
}
}

function registerCapture(data,captureId,capture,stacks,strings){
// NB: capture.refs is potentially VERY large, so we try to avoid making
// copies, even if iteration is a bit more annoying.
var rowCount=0;
for(var id in capture.refs){// eslint-disable-line no-unused-vars
rowCount++;
}
for(var _id in capture.markedBlocks){// eslint-disable-line no-unused-vars
rowCount++;
}
var inserter=data.rowInserter(rowCount);
registerPathToRoot(capture.refs,stacks,strings);
var noneString=strings.intern('#none');
var noneStack=stacks.insert(stacks.root,noneString);
forEachRef(capture.refs,function(visitor){
// want to data.append(value, value, value), not IDs
var ref=visitor.getRef();
var id=visitor.id;
inserter.insertRow(
parseInt(id,16),
ref.type,
ref.size,
captureId,
ref.rootPath===undefined?noneStack:ref.rootPath,
ref.reactTree===undefined?noneStack:ref.reactTree,
visitor.getValue(),
ref.module===undefined?'#none':ref.module);

});
for(var _id2 in capture.markedBlocks){
var block=capture.markedBlocks[_id2];
inserter.insertRow(
parseInt(_id2,16),
'Marked Block Overhead',
block.capacity-block.size,
captureId,
noneStack,
noneStack,
'capacity: '+block.capacity+', size: '+block.size+', granularity: '+block.cellSize,
'#none');

}
inserter.done();
}

if(preLoadedCapture){
var strings=StringInterner();
var stacks=new StackRegistry();
var columns=[
{name:'id',type:'int'},
{name:'type',type:'string',strings:strings},
{name:'size',type:'int'},
{name:'trace',type:'string',strings:strings},
{name:'path',type:'stack',stacks:stacks},
{name:'react',type:'stack',stacks:stacks},
{name:'value',type:'string',strings:strings},
{name:'module',type:'string',strings:strings}];

var data=new AggrowData(columns);
registerCapture(data,'trace',preLoadedCapture,stacks,strings);
preLoadedCapture=undefined;// let GG clean up the capture
var aggrow=new Aggrow(data);
aggrow.addPointerExpander('Id','id');
var typeExpander=aggrow.addStringExpander('Type','type');
aggrow.addNumberExpander('Size','size');
aggrow.addStringExpander('Trace','trace');
var pathExpander=aggrow.addStackExpander('Path','path',strings.get);
var reactExpander=aggrow.addStackExpander('React Tree','react',strings.get);
var valueExpander=aggrow.addStringExpander('Value','value');
var moduleExpander=aggrow.addStringExpander('Module','module');
aggrow.expander.setActiveExpanders([
pathExpander,
reactExpander,
moduleExpander,
typeExpander,
valueExpander]);

var sizeAggregator=aggrow.addSumAggregator('Size','size');
var countAggregator=aggrow.addCountAggregator('Count');
aggrow.expander.setActiveAggregators([
sizeAggregator,
countAggregator]);

ReactDOM.render(React.createElement(Table,{aggrow:aggrow.expander}),document.body);
}
//# sourceMappingURL=data:application/json;base64,
// @generated
